#if POWER_INSPECTOR
using System;
using UnityEngine;
using UnityEditor;
using Sisus.Attributes;
using JetBrains.Annotations;

namespace Sisus.HierarchyFolders
{
	/// <summary>
	/// Drawer for GameObjects that contain the HierarchyFolder component.
	/// </summary>
	[Serializable, DrawerForGameObject(typeof(HierarchyFolder))]
	public class HierarchyFolderDrawer : GameObjectDrawer
	{
		private static readonly GUIContent infoBoxContent = new GUIContent();

		internal static bool staticSetupDone;
		private static string[] infoBoxTextRows;
		private static GUIContent[] infoBoxContentRows;
		private static Texture folderIcon;		

		private float infoBoxAppendHeight = 110f;

		/// <inheritdoc/>
		public override float HeaderHeight
		{
			get
			{
				return base.HeaderHeight + infoBoxAppendHeight;
			}
		}
				
		/// <inheritdoc/>
		protected override bool ShouldIncludeAddComponentButton()
		{
			return false;
		}

		/// <inheritdoc/>
		protected override bool AllowAddingOrRemovingComponents()
		{
			return false;
		}

		/// <inheritdoc/>
		public override bool MemberIsReorderable(IReorderable member)
		{
			return false;
		}

		/// <inheritdoc/>
		public override void Setup([NotNull]GameObject[] setTargets, [CanBeNull] IParentDrawer setParent, [NotNull] IInspector setInspector)
		{
			if(!staticSetupDone)
			{
				StaticSetup();
			}

			HierarchyFolderPreferences.Get().onPreferencesChanged += OnHierarchyFolderPreferencesChanged;

			base.Setup(setTargets, setParent, setInspector);
		}

		private void StaticSetup()
		{
			if(folderIcon == null)
			{
				var iconSizeWas = EditorGUIUtility.GetIconSize();
				EditorGUIUtility.SetIconSize(new Vector2(30f, 30f));
				folderIcon = EditorGUIUtility.IconContent("Folder Icon").image;
				EditorGUIUtility.SetIconSize(iconSizeWas);
			}

			var infoText = HierarchyFolderPreferences.Get().infoBoxText;
			infoBoxTextRows = infoText.Split(new[] { "\r\n", "\n", "\r" }, StringSplitOptions.None);
			int rowCount = infoBoxTextRows.Length;
			infoBoxContent.text = infoText;
			infoBoxContentRows = new GUIContent[rowCount];
			for(int n = rowCount - 1; n >= 0; n--)
			{
				string text = infoBoxTextRows[n];
				infoBoxContentRows[n] = new GUIContent(text);
			}
			staticSetupDone = true;
		}

		private void OnHierarchyFolderPreferencesChanged(HierarchyFolderPreferences preferences)
		{
			StaticSetup();
		}

		/// <inheritdoc/>
		public override bool DrawPrefix(Rect position)
		{
			var hideTagRect = TagFieldPosition;
			hideTagRect.height += 2f;
			
			//block inputs to open tag popup
			GUI.Button(hideTagRect, GUIContent.none, InspectorPreferences.Styles.Blank);

			bool dirty = base.DrawPrefix(position);			

			if(Event.current.type == EventType.Repaint)
			{
				var infoBoxRect = position;
				infoBoxRect.width -= 20f;
				var helpBoxStyle = InspectorPreferences.Styles.HelpBox;

				float infoBoxHeight = 20f;
				int rowCount = infoBoxContentRows.Length;
				for(int n = rowCount - 1; n >= 0; n--)
				{
					var rowContent = infoBoxContentRows[n];
					if(rowContent.text.Length == 0)
					{
						infoBoxHeight += 5f;
					}
					else
					{
						infoBoxHeight += helpBoxStyle.CalcHeight(rowContent, infoBoxRect.width);
					}
				}

				infoBoxAppendHeight = infoBoxHeight + 20f;
				infoBoxRect.y += position.height - infoBoxAppendHeight;
				infoBoxRect.height = infoBoxHeight;
				infoBoxRect.x += 10f;
				infoBoxRect.y += 10f;
				infoBoxRect.height -= 20f;
				GUI.Label(infoBoxRect, infoBoxContent.text, helpBoxStyle);

				position.height -= infoBoxAppendHeight;

				DrawGUI.Active.ColorRect(hideTagRect, inspector.Preferences.theme.AssetHeaderBackground);
				
				var folderIconRect = position;
				folderIconRect.x += 7f;
				folderIconRect.y += 7f;
				folderIconRect.width = 30f;
				folderIconRect.height = 30f;
				DrawGUI.Active.ColorRect(folderIconRect, inspector.Preferences.theme.AssetHeaderBackground);
				GUI.DrawTexture(folderIconRect, folderIcon);

				var subtitleRect = hideTagRect;
				subtitleRect.height = DrawGUI.SingleLineHeight;
				#if UNITY_2019_3_OR_NEWER
				subtitleRect.x = position.x + 43f;
				#else
				subtitleRect.x = position.x + 41f;
				#endif
				subtitleRect.width = 110f;
				GUI.Label(subtitleRect, "Hierarchy Folder", InspectorPreferences.Styles.SubHeader);
			}

			return dirty;
		}

		/// <inheritdoc cref="IDrawer.OnClick" />
		public override bool OnClick(Event inputEvent)
		{
			if(mouseoveredPart == GameObjectHeaderPart.TagField)
			{
				inputEvent.Use();
				return true;
			}
			return base.OnClick(inputEvent);
		}

		/// <inheritdoc cref="IDrawer.OnRightClick" />
		public override bool OnRightClick(Event inputEvent)
		{
			if(mouseoveredPart == GameObjectHeaderPart.TagField)
			{
				inputEvent.Use();
				return true;
			}
			return base.OnRightClick(inputEvent);
		}

		/// <inheritdoc cref="IDrawer.OnKeyboardInputGiven" />
		public override bool OnKeyboardInputGiven(Event inputEvent, KeyConfigs keys)
		{
			if(selectedPart == GameObjectHeaderPart.TagField)
			{
				inputEvent.Use();
				return true;
			}
			return base.OnKeyboardInputGiven(inputEvent, keys);
		}

		/// <inheritdoc/>
		public override void Dispose()
		{
			HierarchyFolderPreferences.Get().onPreferencesChanged -= OnHierarchyFolderPreferencesChanged;
			base.Dispose();
		}
	}
}
#endif